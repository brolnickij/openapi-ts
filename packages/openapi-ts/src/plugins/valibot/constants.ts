import { tsc } from '../../tsc';

export const identifiers = {
  /**
   * {@link https://valibot.dev/api/#actions Actions}
   */
  actions: {
    args: tsc.identifier({ text: 'args' }),
    base64: tsc.identifier({ text: 'base64' }),
    bic: tsc.identifier({ text: 'bic' }),
    brand: tsc.identifier({ text: 'brand' }),
    bytes: tsc.identifier({ text: 'bytes' }),
    check: tsc.identifier({ text: 'check' }),
    checkItems: tsc.identifier({ text: 'checkItems' }),
    creditCard: tsc.identifier({ text: 'creditCard' }),
    cuid2: tsc.identifier({ text: 'cuid2' }),
    decimal: tsc.identifier({ text: 'decimal' }),
    description: tsc.identifier({ text: 'description' }),
    digits: tsc.identifier({ text: 'digits' }),
    email: tsc.identifier({ text: 'email' }),
    emoji: tsc.identifier({ text: 'emoji' }),
    empty: tsc.identifier({ text: 'empty' }),
    endsWith: tsc.identifier({ text: 'endsWith' }),
    entries: tsc.identifier({ text: 'entries' }),
    everyItem: tsc.identifier({ text: 'everyItem' }),
    excludes: tsc.identifier({ text: 'excludes' }),
    filterItems: tsc.identifier({ text: 'filterItems' }),
    findItem: tsc.identifier({ text: 'findItem' }),
    finite: tsc.identifier({ text: 'finite' }),
    flavor: tsc.identifier({ text: 'flavor' }),
    graphemes: tsc.identifier({ text: 'graphemes' }),
    gtValue: tsc.identifier({ text: 'gtValue' }),
    hash: tsc.identifier({ text: 'hash' }),
    hexColor: tsc.identifier({ text: 'hexColor' }),
    hexadecimal: tsc.identifier({ text: 'hexadecimal' }),
    imei: tsc.identifier({ text: 'imei' }),
    includes: tsc.identifier({ text: 'includes' }),
    integer: tsc.identifier({ text: 'integer' }),
    ip: tsc.identifier({ text: 'ip' }),
    ipv4: tsc.identifier({ text: 'ipv4' }),
    ipv6: tsc.identifier({ text: 'ipv6' }),
    isoDate: tsc.identifier({ text: 'isoDate' }),
    isoDateTime: tsc.identifier({ text: 'isoDateTime' }),
    isoTime: tsc.identifier({ text: 'isoTime' }),
    isoTimeSecond: tsc.identifier({ text: 'isoTimeSecond' }),
    isoTimestamp: tsc.identifier({ text: 'isoTimestamp' }),
    isoWeek: tsc.identifier({ text: 'isoWeek' }),
    length: tsc.identifier({ text: 'length' }),
    ltValue: tsc.identifier({ text: 'ltValue' }),
    mac: tsc.identifier({ text: 'mac' }),
    mac48: tsc.identifier({ text: 'mac48' }),
    mac64: tsc.identifier({ text: 'mac64' }),
    mapItems: tsc.identifier({ text: 'mapItems' }),
    maxBytes: tsc.identifier({ text: 'maxBytes' }),
    maxEntries: tsc.identifier({ text: 'maxEntries' }),
    maxGraphemes: tsc.identifier({ text: 'maxGraphemes' }),
    maxLength: tsc.identifier({ text: 'maxLength' }),
    maxSize: tsc.identifier({ text: 'maxSize' }),
    maxValue: tsc.identifier({ text: 'maxValue' }),
    maxWords: tsc.identifier({ text: 'maxWords' }),
    metadata: tsc.identifier({ text: 'metadata' }),
    mimeType: tsc.identifier({ text: 'mimeType' }),
    minBytes: tsc.identifier({ text: 'minBytes' }),
    minEntries: tsc.identifier({ text: 'minEntries' }),
    minGraphemes: tsc.identifier({ text: 'minGraphemes' }),
    minLength: tsc.identifier({ text: 'minLength' }),
    minSize: tsc.identifier({ text: 'minSize' }),
    minValue: tsc.identifier({ text: 'minValue' }),
    minWords: tsc.identifier({ text: 'minWords' }),
    multipleOf: tsc.identifier({ text: 'multipleOf' }),
    nanoid: tsc.identifier({ text: 'nanoid' }),
    nonEmpty: tsc.identifier({ text: 'nonEmpty' }),
    normalize: tsc.identifier({ text: 'normalize' }),
    notBytes: tsc.identifier({ text: 'notBytes' }),
    notEntries: tsc.identifier({ text: 'notEntries' }),
    notGraphemes: tsc.identifier({ text: 'notGraphemes' }),
    notLength: tsc.identifier({ text: 'notLength' }),
    notSize: tsc.identifier({ text: 'notSize' }),
    notValue: tsc.identifier({ text: 'notValue' }),
    notValues: tsc.identifier({ text: 'notValues' }),
    notWords: tsc.identifier({ text: 'notWords' }),
    octal: tsc.identifier({ text: 'octal' }),
    parseJson: tsc.identifier({ text: 'parseJson' }),
    partialCheck: tsc.identifier({ text: 'partialCheck' }),
    rawCheck: tsc.identifier({ text: 'rawCheck' }),
    rawTransform: tsc.identifier({ text: 'rawTransform' }),
    readonly: tsc.identifier({ text: 'readonly' }),
    reduceItems: tsc.identifier({ text: 'reduceItems' }),
    regex: tsc.identifier({ text: 'regex' }),
    returns: tsc.identifier({ text: 'returns' }),
    rfcEmail: tsc.identifier({ text: 'rfcEmail' }),
    safeInteger: tsc.identifier({ text: 'safeInteger' }),
    size: tsc.identifier({ text: 'size' }),
    slug: tsc.identifier({ text: 'slug' }),
    someItem: tsc.identifier({ text: 'someItem' }),
    sortItems: tsc.identifier({ text: 'sortItems' }),
    startsWith: tsc.identifier({ text: 'startsWith' }),
    stringifyJson: tsc.identifier({ text: 'stringifyJson' }),
    title: tsc.identifier({ text: 'title' }),
    toLowerCase: tsc.identifier({ text: 'toLowerCase' }),
    toMaxValue: tsc.identifier({ text: 'toMaxValue' }),
    toMinValue: tsc.identifier({ text: 'toMinValue' }),
    toUpperCase: tsc.identifier({ text: 'toUpperCase' }),
    transform: tsc.identifier({ text: 'transform' }),
    trim: tsc.identifier({ text: 'trim' }),
    trimEnd: tsc.identifier({ text: 'trimEnd' }),
    trimStart: tsc.identifier({ text: 'trimStart' }),
    ulid: tsc.identifier({ text: 'ulid' }),
    url: tsc.identifier({ text: 'url' }),
    uuid: tsc.identifier({ text: 'uuid' }),
    value: tsc.identifier({ text: 'value' }),
    values: tsc.identifier({ text: 'values' }),
    words: tsc.identifier({ text: 'words' }),
  },
  /**
   * {@link https://valibot.dev/api/#async Async}
   */
  async: {
    argsAsync: tsc.identifier({ text: 'argsAsync' }),
    arrayAsync: tsc.identifier({ text: 'arrayAsync' }),
    awaitAsync: tsc.identifier({ text: 'awaitAsync' }),
    checkAsync: tsc.identifier({ text: 'checkAsync' }),
    checkItemsAsync: tsc.identifier({ text: 'checkItemsAsync' }),
    customAsync: tsc.identifier({ text: 'customAsync' }),
    exactOptionalAsync: tsc.identifier({ text: 'exactOptionalAsync' }),
    fallbackAsync: tsc.identifier({ text: 'fallbackAsync' }),
    forwardAsync: tsc.identifier({ text: 'forwardAsync' }),
    getDefaultsAsync: tsc.identifier({ text: 'getDefaultsAsync' }),
    getFallbacksAsync: tsc.identifier({ text: 'getFallbacksAsync' }),
    intersectAsync: tsc.identifier({ text: 'intersectAsync' }),
    lazyAsync: tsc.identifier({ text: 'lazyAsync' }),
    looseObjectAsync: tsc.identifier({ text: 'looseObjectAsync' }),
    looseTupleAsync: tsc.identifier({ text: 'looseTupleAsync' }),
    mapAsync: tsc.identifier({ text: 'mapAsync' }),
    nonNullableAsync: tsc.identifier({ text: 'nonNullableAsync' }),
    nonNullishAsync: tsc.identifier({ text: 'nonNullishAsync' }),
    nonOptionalAsync: tsc.identifier({ text: 'nonOptionalAsync' }),
    nullableAsync: tsc.identifier({ text: 'nullableAsync' }),
    nullishAsync: tsc.identifier({ text: 'nullishAsync' }),
    objectAsync: tsc.identifier({ text: 'objectAsync' }),
    objectWithRestAsync: tsc.identifier({ text: 'objectWithRestAsync' }),
    optionalAsync: tsc.identifier({ text: 'optionalAsync' }),
    parseAsync: tsc.identifier({ text: 'parseAsync' }),
    parserAsync: tsc.identifier({ text: 'parserAsync' }),
    partialAsync: tsc.identifier({ text: 'partialAsync' }),
    partialCheckAsync: tsc.identifier({ text: 'partialCheckAsync' }),
    pipeAsync: tsc.identifier({ text: 'pipeAsync' }),
    rawCheckAsync: tsc.identifier({ text: 'rawCheckAsync' }),
    rawTransformAsync: tsc.identifier({ text: 'rawTransformAsync' }),
    recordAsync: tsc.identifier({ text: 'recordAsync' }),
    requiredAsync: tsc.identifier({ text: 'requiredAsync' }),
    returnsAsync: tsc.identifier({ text: 'returnsAsync' }),
    safeParseAsync: tsc.identifier({ text: 'safeParseAsync' }),
    safeParserAsync: tsc.identifier({ text: 'safeParserAsync' }),
    setAsync: tsc.identifier({ text: 'setAsync' }),
    strictObjectAsync: tsc.identifier({ text: 'strictObjectAsync' }),
    strictTupleAsync: tsc.identifier({ text: 'strictTupleAsync' }),
    transformAsync: tsc.identifier({ text: 'transformAsync' }),
    tupleAsync: tsc.identifier({ text: 'tupleAsync' }),
    tupleWithRestAsync: tsc.identifier({ text: 'tupleWithRestAsync' }),
    undefinedableAsync: tsc.identifier({ text: 'undefinedableAsync' }),
    unionAsync: tsc.identifier({ text: 'unionAsync' }),
    variantAsync: tsc.identifier({ text: 'variantAsync' }),
  },
  /**
   * {@link https://valibot.dev/api/#methods Methods}
   */
  methods: {
    assert: tsc.identifier({ text: 'assert' }),
    config: tsc.identifier({ text: 'config' }),
    fallback: tsc.identifier({ text: 'fallback' }),
    flatten: tsc.identifier({ text: 'flatten' }),
    forward: tsc.identifier({ text: 'forward' }),
    getDefault: tsc.identifier({ text: 'getDefault' }),
    getDefaults: tsc.identifier({ text: 'getDefaults' }),
    getDescription: tsc.identifier({ text: 'getDescription' }),
    getFallback: tsc.identifier({ text: 'getFallback' }),
    getFallbacks: tsc.identifier({ text: 'getFallbacks' }),
    getMetadata: tsc.identifier({ text: 'getMetadata' }),
    getTitle: tsc.identifier({ text: 'getTitle' }),
    is: tsc.identifier({ text: 'is' }),
    keyof: tsc.identifier({ text: 'keyof' }),
    message: tsc.identifier({ text: 'message' }),
    omit: tsc.identifier({ text: 'omit' }),
    parse: tsc.identifier({ text: 'parse' }),
    parser: tsc.identifier({ text: 'parser' }),
    partial: tsc.identifier({ text: 'partial' }),
    pick: tsc.identifier({ text: 'pick' }),
    pipe: tsc.identifier({ text: 'pipe' }),
    required: tsc.identifier({ text: 'required' }),
    safeParse: tsc.identifier({ text: 'safeParse' }),
    safeParser: tsc.identifier({ text: 'safeParser' }),
    summarize: tsc.identifier({ text: 'summarize' }),
    unwrap: tsc.identifier({ text: 'unwrap' }),
  },
  /**
   * {@link https://valibot.dev/api/#schemas Schemas}
   */
  schemas: {
    any: tsc.identifier({ text: 'any' }),
    array: tsc.identifier({ text: 'array' }),
    bigInt: tsc.identifier({ text: 'bigint' }),
    blob: tsc.identifier({ text: 'blob' }),
    boolean: tsc.identifier({ text: 'boolean' }),
    custom: tsc.identifier({ text: 'custom' }),
    date: tsc.identifier({ text: 'date' }),
    enum: tsc.identifier({ text: 'enum' }),
    exactOptional: tsc.identifier({ text: 'exactOptional' }),
    file: tsc.identifier({ text: 'file' }),
    function: tsc.identifier({ text: 'function' }),
    instance: tsc.identifier({ text: 'instance' }),
    intersect: tsc.identifier({ text: 'intersect' }),
    lazy: tsc.identifier({ text: 'lazy' }),
    literal: tsc.identifier({ text: 'literal' }),
    looseObject: tsc.identifier({ text: 'looseObject' }),
    looseTuple: tsc.identifier({ text: 'looseTuple' }),
    map: tsc.identifier({ text: 'map' }),
    nan: tsc.identifier({ text: 'nan' }),
    never: tsc.identifier({ text: 'never' }),
    nonNullable: tsc.identifier({ text: 'nonNullable' }),
    nonNullish: tsc.identifier({ text: 'nonNullish' }),
    nonOptional: tsc.identifier({ text: 'nonOptional' }),
    null: tsc.identifier({ text: 'null' }),
    nullable: tsc.identifier({ text: 'nullable' }),
    nullish: tsc.identifier({ text: 'nullish' }),
    number: tsc.identifier({ text: 'number' }),
    object: tsc.identifier({ text: 'object' }),
    objectWithRest: tsc.identifier({ text: 'objectWithRest' }),
    optional: tsc.identifier({ text: 'optional' }),
    picklist: tsc.identifier({ text: 'picklist' }),
    promise: tsc.identifier({ text: 'promise' }),
    record: tsc.identifier({ text: 'record' }),
    set: tsc.identifier({ text: 'set' }),
    strictObject: tsc.identifier({ text: 'strictObject' }),
    strictTuple: tsc.identifier({ text: 'strictTuple' }),
    string: tsc.identifier({ text: 'string' }),
    symbol: tsc.identifier({ text: 'symbol' }),
    tuple: tsc.identifier({ text: 'tuple' }),
    tupleWithRest: tsc.identifier({ text: 'tupleWithRest' }),
    undefined: tsc.identifier({ text: 'undefined' }),
    undefinedable: tsc.identifier({ text: 'undefinedable' }),
    union: tsc.identifier({ text: 'union' }),
    unknown: tsc.identifier({ text: 'unknown' }),
    variant: tsc.identifier({ text: 'variant' }),
    void: tsc.identifier({ text: 'void' }),
  },
  /**
   * {@link https://valibot.dev/api/#storages Storages}
   */
  storages: {
    // TODO: implement if necessary
  },
  /**
   * {@link https://valibot.dev/api/#types Types}
   */
  types: {
    // TODO: implement if necessary
    GenericSchema: tsc.identifier({ text: 'GenericSchema' }),
  },
  /**
   * {@link https://valibot.dev/api/#utils Utils}
   */
  utils: {
    // TODO: implement if necessary
  },
};
